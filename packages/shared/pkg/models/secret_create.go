// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/secret"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/team"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// SecretCreate is the builder for creating a Secret entity.
type SecretCreate struct {
	config
	mutation *SecretMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SecretCreate) SetCreatedAt(t time.Time) *SecretCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SecretCreate) SetNillableCreatedAt(t *time.Time) *SecretCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SecretCreate) SetUpdatedAt(t time.Time) *SecretCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SecretCreate) SetNillableUpdatedAt(t *time.Time) *SecretCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetTeamID sets the "team_id" field.
func (sc *SecretCreate) SetTeamID(u uuid.UUID) *SecretCreate {
	sc.mutation.SetTeamID(u)
	return sc
}

// SetLabel sets the "label" field.
func (sc *SecretCreate) SetLabel(s string) *SecretCreate {
	sc.mutation.SetLabel(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SecretCreate) SetDescription(s string) *SecretCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SecretCreate) SetNillableDescription(s *string) *SecretCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetAllowlist sets the "allowlist" field.
func (sc *SecretCreate) SetAllowlist(pa pq.StringArray) *SecretCreate {
	sc.mutation.SetAllowlist(pa)
	return sc
}

// SetID sets the "id" field.
func (sc *SecretCreate) SetID(u uuid.UUID) *SecretCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetTeam sets the "team" edge to the Team entity.
func (sc *SecretCreate) SetTeam(t *Team) *SecretCreate {
	return sc.SetTeamID(t.ID)
}

// Mutation returns the SecretMutation object of the builder.
func (sc *SecretCreate) Mutation() *SecretMutation {
	return sc.mutation
}

// Save creates the Secret in the database.
func (sc *SecretCreate) Save(ctx context.Context) (*Secret, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SecretCreate) SaveX(ctx context.Context) *Secret {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SecretCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SecretCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SecretCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := secret.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.Description(); !ok {
		v := secret.DefaultDescription
		sc.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SecretCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`models: missing required field "Secret.created_at"`)}
	}
	if _, ok := sc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`models: missing required field "Secret.team_id"`)}
	}
	if _, ok := sc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`models: missing required field "Secret.label"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`models: missing required field "Secret.description"`)}
	}
	if _, ok := sc.mutation.Allowlist(); !ok {
		return &ValidationError{Name: "allowlist", err: errors.New(`models: missing required field "Secret.allowlist"`)}
	}
	if _, ok := sc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`models: missing required edge "Secret.team"`)}
	}
	return nil
}

func (sc *SecretCreate) sqlSave(ctx context.Context) (*Secret, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SecretCreate) createSpec() (*Secret, *sqlgraph.CreateSpec) {
	var (
		_node = &Secret{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(secret.Table, sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID))
	)
	_spec.Schema = sc.schemaConfig.Secret
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(secret.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(secret.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := sc.mutation.Label(); ok {
		_spec.SetField(secret.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(secret.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Allowlist(); ok {
		_spec.SetField(secret.FieldAllowlist, field.TypeOther, value)
		_node.Allowlist = value
	}
	if nodes := sc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   secret.TeamTable,
			Columns: []string{secret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = sc.schemaConfig.Secret
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Secret.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SecretUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SecretCreate) OnConflict(opts ...sql.ConflictOption) *SecretUpsertOne {
	sc.conflict = opts
	return &SecretUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Secret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SecretCreate) OnConflictColumns(columns ...string) *SecretUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SecretUpsertOne{
		create: sc,
	}
}

type (
	// SecretUpsertOne is the builder for "upsert"-ing
	//  one Secret node.
	SecretUpsertOne struct {
		create *SecretCreate
	}

	// SecretUpsert is the "OnConflict" setter.
	SecretUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SecretUpsert) SetUpdatedAt(v time.Time) *SecretUpsert {
	u.Set(secret.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SecretUpsert) UpdateUpdatedAt() *SecretUpsert {
	u.SetExcluded(secret.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SecretUpsert) ClearUpdatedAt() *SecretUpsert {
	u.SetNull(secret.FieldUpdatedAt)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *SecretUpsert) SetTeamID(v uuid.UUID) *SecretUpsert {
	u.Set(secret.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SecretUpsert) UpdateTeamID() *SecretUpsert {
	u.SetExcluded(secret.FieldTeamID)
	return u
}

// SetLabel sets the "label" field.
func (u *SecretUpsert) SetLabel(v string) *SecretUpsert {
	u.Set(secret.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SecretUpsert) UpdateLabel() *SecretUpsert {
	u.SetExcluded(secret.FieldLabel)
	return u
}

// SetDescription sets the "description" field.
func (u *SecretUpsert) SetDescription(v string) *SecretUpsert {
	u.Set(secret.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SecretUpsert) UpdateDescription() *SecretUpsert {
	u.SetExcluded(secret.FieldDescription)
	return u
}

// SetAllowlist sets the "allowlist" field.
func (u *SecretUpsert) SetAllowlist(v pq.StringArray) *SecretUpsert {
	u.Set(secret.FieldAllowlist, v)
	return u
}

// UpdateAllowlist sets the "allowlist" field to the value that was provided on create.
func (u *SecretUpsert) UpdateAllowlist() *SecretUpsert {
	u.SetExcluded(secret.FieldAllowlist)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Secret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(secret.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SecretUpsertOne) UpdateNewValues() *SecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(secret.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(secret.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Secret.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SecretUpsertOne) Ignore() *SecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SecretUpsertOne) DoNothing() *SecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SecretCreate.OnConflict
// documentation for more info.
func (u *SecretUpsertOne) Update(set func(*SecretUpsert)) *SecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SecretUpsertOne) SetUpdatedAt(v time.Time) *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SecretUpsertOne) UpdateUpdatedAt() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SecretUpsertOne) ClearUpdatedAt() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetTeamID sets the "team_id" field.
func (u *SecretUpsertOne) SetTeamID(v uuid.UUID) *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SecretUpsertOne) UpdateTeamID() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateTeamID()
	})
}

// SetLabel sets the "label" field.
func (u *SecretUpsertOne) SetLabel(v string) *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SecretUpsertOne) UpdateLabel() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SecretUpsertOne) SetDescription(v string) *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SecretUpsertOne) UpdateDescription() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateDescription()
	})
}

// SetAllowlist sets the "allowlist" field.
func (u *SecretUpsertOne) SetAllowlist(v pq.StringArray) *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.SetAllowlist(v)
	})
}

// UpdateAllowlist sets the "allowlist" field to the value that was provided on create.
func (u *SecretUpsertOne) UpdateAllowlist() *SecretUpsertOne {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateAllowlist()
	})
}

// Exec executes the query.
func (u *SecretUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for SecretCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SecretUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SecretUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("models: SecretUpsertOne.ID is not supported by MySQL driver. Use SecretUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SecretUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SecretCreateBulk is the builder for creating many Secret entities in bulk.
type SecretCreateBulk struct {
	config
	err      error
	builders []*SecretCreate
	conflict []sql.ConflictOption
}

// Save creates the Secret entities in the database.
func (scb *SecretCreateBulk) Save(ctx context.Context) ([]*Secret, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Secret, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SecretCreateBulk) SaveX(ctx context.Context) []*Secret {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SecretCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SecretCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Secret.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SecretUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SecretCreateBulk) OnConflict(opts ...sql.ConflictOption) *SecretUpsertBulk {
	scb.conflict = opts
	return &SecretUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Secret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SecretCreateBulk) OnConflictColumns(columns ...string) *SecretUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SecretUpsertBulk{
		create: scb,
	}
}

// SecretUpsertBulk is the builder for "upsert"-ing
// a bulk of Secret nodes.
type SecretUpsertBulk struct {
	create *SecretCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Secret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(secret.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SecretUpsertBulk) UpdateNewValues() *SecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(secret.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(secret.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Secret.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SecretUpsertBulk) Ignore() *SecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SecretUpsertBulk) DoNothing() *SecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SecretCreateBulk.OnConflict
// documentation for more info.
func (u *SecretUpsertBulk) Update(set func(*SecretUpsert)) *SecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SecretUpsertBulk) SetUpdatedAt(v time.Time) *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SecretUpsertBulk) UpdateUpdatedAt() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SecretUpsertBulk) ClearUpdatedAt() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetTeamID sets the "team_id" field.
func (u *SecretUpsertBulk) SetTeamID(v uuid.UUID) *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SecretUpsertBulk) UpdateTeamID() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateTeamID()
	})
}

// SetLabel sets the "label" field.
func (u *SecretUpsertBulk) SetLabel(v string) *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SecretUpsertBulk) UpdateLabel() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SecretUpsertBulk) SetDescription(v string) *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SecretUpsertBulk) UpdateDescription() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateDescription()
	})
}

// SetAllowlist sets the "allowlist" field.
func (u *SecretUpsertBulk) SetAllowlist(v pq.StringArray) *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.SetAllowlist(v)
	})
}

// UpdateAllowlist sets the "allowlist" field to the value that was provided on create.
func (u *SecretUpsertBulk) UpdateAllowlist() *SecretUpsertBulk {
	return u.Update(func(s *SecretUpsert) {
		s.UpdateAllowlist()
	})
}

// Exec executes the query.
func (u *SecretUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("models: OnConflict was set for builder %d. Set it on the SecretCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for SecretCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SecretUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
