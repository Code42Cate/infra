// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/team"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/teamsecret"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// TeamSecretCreate is the builder for creating a TeamSecret entity.
type TeamSecretCreate struct {
	config
	mutation *TeamSecretMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSecretPrefix sets the "secret_prefix" field.
func (tsc *TeamSecretCreate) SetSecretPrefix(s string) *TeamSecretCreate {
	tsc.mutation.SetSecretPrefix(s)
	return tsc
}

// SetSecretLength sets the "secret_length" field.
func (tsc *TeamSecretCreate) SetSecretLength(i int) *TeamSecretCreate {
	tsc.mutation.SetSecretLength(i)
	return tsc
}

// SetSecretMaskPrefix sets the "secret_mask_prefix" field.
func (tsc *TeamSecretCreate) SetSecretMaskPrefix(s string) *TeamSecretCreate {
	tsc.mutation.SetSecretMaskPrefix(s)
	return tsc
}

// SetSecretMaskSuffix sets the "secret_mask_suffix" field.
func (tsc *TeamSecretCreate) SetSecretMaskSuffix(s string) *TeamSecretCreate {
	tsc.mutation.SetSecretMaskSuffix(s)
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TeamSecretCreate) SetCreatedAt(t time.Time) *TeamSecretCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TeamSecretCreate) SetNillableCreatedAt(t *time.Time) *TeamSecretCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TeamSecretCreate) SetUpdatedAt(t time.Time) *TeamSecretCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TeamSecretCreate) SetNillableUpdatedAt(t *time.Time) *TeamSecretCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetTeamID sets the "team_id" field.
func (tsc *TeamSecretCreate) SetTeamID(u uuid.UUID) *TeamSecretCreate {
	tsc.mutation.SetTeamID(u)
	return tsc
}

// SetName sets the "name" field.
func (tsc *TeamSecretCreate) SetName(s string) *TeamSecretCreate {
	tsc.mutation.SetName(s)
	return tsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tsc *TeamSecretCreate) SetNillableName(s *string) *TeamSecretCreate {
	if s != nil {
		tsc.SetName(*s)
	}
	return tsc
}

// SetHosts sets the "hosts" field.
func (tsc *TeamSecretCreate) SetHosts(pa pq.StringArray) *TeamSecretCreate {
	tsc.mutation.SetHosts(pa)
	return tsc
}

// SetID sets the "id" field.
func (tsc *TeamSecretCreate) SetID(u uuid.UUID) *TeamSecretCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// SetTeam sets the "team" edge to the Team entity.
func (tsc *TeamSecretCreate) SetTeam(t *Team) *TeamSecretCreate {
	return tsc.SetTeamID(t.ID)
}

// Mutation returns the TeamSecretMutation object of the builder.
func (tsc *TeamSecretCreate) Mutation() *TeamSecretMutation {
	return tsc.mutation
}

// Save creates the TeamSecret in the database.
func (tsc *TeamSecretCreate) Save(ctx context.Context) (*TeamSecret, error) {
	tsc.defaults()
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TeamSecretCreate) SaveX(ctx context.Context) *TeamSecret {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TeamSecretCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TeamSecretCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TeamSecretCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := teamsecret.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.Name(); !ok {
		v := teamsecret.DefaultName
		tsc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TeamSecretCreate) check() error {
	if _, ok := tsc.mutation.SecretPrefix(); !ok {
		return &ValidationError{Name: "secret_prefix", err: errors.New(`models: missing required field "TeamSecret.secret_prefix"`)}
	}
	if _, ok := tsc.mutation.SecretLength(); !ok {
		return &ValidationError{Name: "secret_length", err: errors.New(`models: missing required field "TeamSecret.secret_length"`)}
	}
	if _, ok := tsc.mutation.SecretMaskPrefix(); !ok {
		return &ValidationError{Name: "secret_mask_prefix", err: errors.New(`models: missing required field "TeamSecret.secret_mask_prefix"`)}
	}
	if _, ok := tsc.mutation.SecretMaskSuffix(); !ok {
		return &ValidationError{Name: "secret_mask_suffix", err: errors.New(`models: missing required field "TeamSecret.secret_mask_suffix"`)}
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`models: missing required field "TeamSecret.created_at"`)}
	}
	if _, ok := tsc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`models: missing required field "TeamSecret.team_id"`)}
	}
	if _, ok := tsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`models: missing required field "TeamSecret.name"`)}
	}
	if _, ok := tsc.mutation.Hosts(); !ok {
		return &ValidationError{Name: "hosts", err: errors.New(`models: missing required field "TeamSecret.hosts"`)}
	}
	if _, ok := tsc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`models: missing required edge "TeamSecret.team"`)}
	}
	return nil
}

func (tsc *TeamSecretCreate) sqlSave(ctx context.Context) (*TeamSecret, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TeamSecretCreate) createSpec() (*TeamSecret, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamSecret{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(teamsecret.Table, sqlgraph.NewFieldSpec(teamsecret.FieldID, field.TypeUUID))
	)
	_spec.Schema = tsc.schemaConfig.TeamSecret
	_spec.OnConflict = tsc.conflict
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tsc.mutation.SecretPrefix(); ok {
		_spec.SetField(teamsecret.FieldSecretPrefix, field.TypeString, value)
		_node.SecretPrefix = value
	}
	if value, ok := tsc.mutation.SecretLength(); ok {
		_spec.SetField(teamsecret.FieldSecretLength, field.TypeInt, value)
		_node.SecretLength = value
	}
	if value, ok := tsc.mutation.SecretMaskPrefix(); ok {
		_spec.SetField(teamsecret.FieldSecretMaskPrefix, field.TypeString, value)
		_node.SecretMaskPrefix = value
	}
	if value, ok := tsc.mutation.SecretMaskSuffix(); ok {
		_spec.SetField(teamsecret.FieldSecretMaskSuffix, field.TypeString, value)
		_node.SecretMaskSuffix = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(teamsecret.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(teamsecret.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := tsc.mutation.Name(); ok {
		_spec.SetField(teamsecret.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tsc.mutation.Hosts(); ok {
		_spec.SetField(teamsecret.FieldHosts, field.TypeOther, value)
		_node.Hosts = value
	}
	if nodes := tsc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teamsecret.TeamTable,
			Columns: []string{teamsecret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = tsc.schemaConfig.TeamSecret
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamSecret.Create().
//		SetSecretPrefix(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamSecretUpsert) {
//			SetSecretPrefix(v+v).
//		}).
//		Exec(ctx)
func (tsc *TeamSecretCreate) OnConflict(opts ...sql.ConflictOption) *TeamSecretUpsertOne {
	tsc.conflict = opts
	return &TeamSecretUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TeamSecretCreate) OnConflictColumns(columns ...string) *TeamSecretUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TeamSecretUpsertOne{
		create: tsc,
	}
}

type (
	// TeamSecretUpsertOne is the builder for "upsert"-ing
	//  one TeamSecret node.
	TeamSecretUpsertOne struct {
		create *TeamSecretCreate
	}

	// TeamSecretUpsert is the "OnConflict" setter.
	TeamSecretUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamSecretUpsert) SetUpdatedAt(v time.Time) *TeamSecretUpsert {
	u.Set(teamsecret.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamSecretUpsert) UpdateUpdatedAt() *TeamSecretUpsert {
	u.SetExcluded(teamsecret.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TeamSecretUpsert) ClearUpdatedAt() *TeamSecretUpsert {
	u.SetNull(teamsecret.FieldUpdatedAt)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *TeamSecretUpsert) SetTeamID(v uuid.UUID) *TeamSecretUpsert {
	u.Set(teamsecret.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *TeamSecretUpsert) UpdateTeamID() *TeamSecretUpsert {
	u.SetExcluded(teamsecret.FieldTeamID)
	return u
}

// SetName sets the "name" field.
func (u *TeamSecretUpsert) SetName(v string) *TeamSecretUpsert {
	u.Set(teamsecret.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamSecretUpsert) UpdateName() *TeamSecretUpsert {
	u.SetExcluded(teamsecret.FieldName)
	return u
}

// SetHosts sets the "hosts" field.
func (u *TeamSecretUpsert) SetHosts(v pq.StringArray) *TeamSecretUpsert {
	u.Set(teamsecret.FieldHosts, v)
	return u
}

// UpdateHosts sets the "hosts" field to the value that was provided on create.
func (u *TeamSecretUpsert) UpdateHosts() *TeamSecretUpsert {
	u.SetExcluded(teamsecret.FieldHosts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamsecret.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TeamSecretUpsertOne) UpdateNewValues() *TeamSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teamsecret.FieldID)
		}
		if _, exists := u.create.mutation.SecretPrefix(); exists {
			s.SetIgnore(teamsecret.FieldSecretPrefix)
		}
		if _, exists := u.create.mutation.SecretLength(); exists {
			s.SetIgnore(teamsecret.FieldSecretLength)
		}
		if _, exists := u.create.mutation.SecretMaskPrefix(); exists {
			s.SetIgnore(teamsecret.FieldSecretMaskPrefix)
		}
		if _, exists := u.create.mutation.SecretMaskSuffix(); exists {
			s.SetIgnore(teamsecret.FieldSecretMaskSuffix)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teamsecret.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamSecretUpsertOne) Ignore() *TeamSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamSecretUpsertOne) DoNothing() *TeamSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamSecretCreate.OnConflict
// documentation for more info.
func (u *TeamSecretUpsertOne) Update(set func(*TeamSecretUpsert)) *TeamSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamSecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamSecretUpsertOne) SetUpdatedAt(v time.Time) *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamSecretUpsertOne) UpdateUpdatedAt() *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TeamSecretUpsertOne) ClearUpdatedAt() *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetTeamID sets the "team_id" field.
func (u *TeamSecretUpsertOne) SetTeamID(v uuid.UUID) *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *TeamSecretUpsertOne) UpdateTeamID() *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *TeamSecretUpsertOne) SetName(v string) *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamSecretUpsertOne) UpdateName() *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateName()
	})
}

// SetHosts sets the "hosts" field.
func (u *TeamSecretUpsertOne) SetHosts(v pq.StringArray) *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetHosts(v)
	})
}

// UpdateHosts sets the "hosts" field to the value that was provided on create.
func (u *TeamSecretUpsertOne) UpdateHosts() *TeamSecretUpsertOne {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateHosts()
	})
}

// Exec executes the query.
func (u *TeamSecretUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for TeamSecretCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamSecretUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamSecretUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("models: TeamSecretUpsertOne.ID is not supported by MySQL driver. Use TeamSecretUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamSecretUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamSecretCreateBulk is the builder for creating many TeamSecret entities in bulk.
type TeamSecretCreateBulk struct {
	config
	err      error
	builders []*TeamSecretCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamSecret entities in the database.
func (tscb *TeamSecretCreateBulk) Save(ctx context.Context) ([]*TeamSecret, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TeamSecret, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamSecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TeamSecretCreateBulk) SaveX(ctx context.Context) []*TeamSecret {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TeamSecretCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TeamSecretCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamSecret.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamSecretUpsert) {
//			SetSecretPrefix(v+v).
//		}).
//		Exec(ctx)
func (tscb *TeamSecretCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamSecretUpsertBulk {
	tscb.conflict = opts
	return &TeamSecretUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TeamSecretCreateBulk) OnConflictColumns(columns ...string) *TeamSecretUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TeamSecretUpsertBulk{
		create: tscb,
	}
}

// TeamSecretUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamSecret nodes.
type TeamSecretUpsertBulk struct {
	create *TeamSecretCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamsecret.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TeamSecretUpsertBulk) UpdateNewValues() *TeamSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teamsecret.FieldID)
			}
			if _, exists := b.mutation.SecretPrefix(); exists {
				s.SetIgnore(teamsecret.FieldSecretPrefix)
			}
			if _, exists := b.mutation.SecretLength(); exists {
				s.SetIgnore(teamsecret.FieldSecretLength)
			}
			if _, exists := b.mutation.SecretMaskPrefix(); exists {
				s.SetIgnore(teamsecret.FieldSecretMaskPrefix)
			}
			if _, exists := b.mutation.SecretMaskSuffix(); exists {
				s.SetIgnore(teamsecret.FieldSecretMaskSuffix)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teamsecret.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamSecret.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamSecretUpsertBulk) Ignore() *TeamSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamSecretUpsertBulk) DoNothing() *TeamSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamSecretCreateBulk.OnConflict
// documentation for more info.
func (u *TeamSecretUpsertBulk) Update(set func(*TeamSecretUpsert)) *TeamSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamSecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamSecretUpsertBulk) SetUpdatedAt(v time.Time) *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamSecretUpsertBulk) UpdateUpdatedAt() *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TeamSecretUpsertBulk) ClearUpdatedAt() *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetTeamID sets the "team_id" field.
func (u *TeamSecretUpsertBulk) SetTeamID(v uuid.UUID) *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *TeamSecretUpsertBulk) UpdateTeamID() *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *TeamSecretUpsertBulk) SetName(v string) *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamSecretUpsertBulk) UpdateName() *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateName()
	})
}

// SetHosts sets the "hosts" field.
func (u *TeamSecretUpsertBulk) SetHosts(v pq.StringArray) *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.SetHosts(v)
	})
}

// UpdateHosts sets the "hosts" field to the value that was provided on create.
func (u *TeamSecretUpsertBulk) UpdateHosts() *TeamSecretUpsertBulk {
	return u.Update(func(s *TeamSecretUpsert) {
		s.UpdateHosts()
	})
}

// Exec executes the query.
func (u *TeamSecretUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("models: OnConflict was set for builder %d. Set it on the TeamSecretCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for TeamSecretCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamSecretUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
