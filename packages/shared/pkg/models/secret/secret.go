// Code generated by ent, DO NOT EDIT.

package secret

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the secret type in the database.
	Label = "secret"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSecretPrefix holds the string denoting the secret_prefix field in the database.
	FieldSecretPrefix = "secret_prefix"
	// FieldSecretLength holds the string denoting the secret_length field in the database.
	FieldSecretLength = "secret_length"
	// FieldSecretMaskPrefix holds the string denoting the secret_mask_prefix field in the database.
	FieldSecretMaskPrefix = "secret_mask_prefix"
	// FieldSecretMaskSuffix holds the string denoting the secret_mask_suffix field in the database.
	FieldSecretMaskSuffix = "secret_mask_suffix"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldHosts holds the string denoting the hosts field in the database.
	FieldHosts = "hosts"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the secret in the database.
	Table = "secrets"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "secrets"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
)

// Columns holds all SQL columns for secret fields.
var Columns = []string{
	FieldID,
	FieldSecretPrefix,
	FieldSecretLength,
	FieldSecretMaskPrefix,
	FieldSecretMaskSuffix,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTeamID,
	FieldName,
	FieldHosts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)

// OrderOption defines the ordering options for the Secret queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySecretPrefix orders the results by the secret_prefix field.
func BySecretPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretPrefix, opts...).ToFunc()
}

// BySecretLength orders the results by the secret_length field.
func BySecretLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretLength, opts...).ToFunc()
}

// BySecretMaskPrefix orders the results by the secret_mask_prefix field.
func BySecretMaskPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretMaskPrefix, opts...).ToFunc()
}

// BySecretMaskSuffix orders the results by the secret_mask_suffix field.
func BySecretMaskSuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretMaskSuffix, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTeamID orders the results by the team_id field.
func ByTeamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHosts orders the results by the hosts field.
func ByHosts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHosts, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
