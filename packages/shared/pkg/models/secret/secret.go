// Code generated by ent, DO NOT EDIT.

package secret

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the secret type in the database.
	Label = "secret"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAllowlist holds the string denoting the allowlist field in the database.
	FieldAllowlist = "allowlist"
	// FieldCreatedByUser holds the string denoting the created_by_user field in the database.
	FieldCreatedByUser = "created_by_user"
	// FieldCreatedByAPIKey holds the string denoting the created_by_api_key field in the database.
	FieldCreatedByAPIKey = "created_by_api_key"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeCreatorUser holds the string denoting the creator_user edge name in mutations.
	EdgeCreatorUser = "creator_user"
	// EdgeCreatorAPIKey holds the string denoting the creator_api_key edge name in mutations.
	EdgeCreatorAPIKey = "creator_api_key"
	// Table holds the table name of the secret in the database.
	Table = "secrets"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "secrets"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// CreatorUserTable is the table that holds the creator_user relation/edge.
	CreatorUserTable = "secrets"
	// CreatorUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorUserInverseTable = "users"
	// CreatorUserColumn is the table column denoting the creator_user relation/edge.
	CreatorUserColumn = "created_by_user"
	// CreatorAPIKeyTable is the table that holds the creator_api_key relation/edge.
	CreatorAPIKeyTable = "secrets"
	// CreatorAPIKeyInverseTable is the table name for the TeamAPIKey entity.
	// It exists in this package in order to avoid circular dependency with the "teamapikey" package.
	CreatorAPIKeyInverseTable = "team_api_keys"
	// CreatorAPIKeyColumn is the table column denoting the creator_api_key relation/edge.
	CreatorAPIKeyColumn = "created_by_api_key"
)

// Columns holds all SQL columns for secret fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTeamID,
	FieldLabel,
	FieldDescription,
	FieldAllowlist,
	FieldCreatedByUser,
	FieldCreatedByAPIKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

// OrderOption defines the ordering options for the Secret queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTeamID orders the results by the team_id field.
func ByTeamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAllowlist orders the results by the allowlist field.
func ByAllowlist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowlist, opts...).ToFunc()
}

// ByCreatedByUser orders the results by the created_by_user field.
func ByCreatedByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUser, opts...).ToFunc()
}

// ByCreatedByAPIKey orders the results by the created_by_api_key field.
func ByCreatedByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByAPIKey, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorUserField orders the results by creator_user field.
func ByCreatorUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorAPIKeyField orders the results by creator_api_key field.
func ByCreatorAPIKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorAPIKeyStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newCreatorUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorUserTable, CreatorUserColumn),
	)
}
func newCreatorAPIKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorAPIKeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPIKeyTable, CreatorAPIKeyColumn),
	)
}
