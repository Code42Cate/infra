// Code generated by ent, DO NOT EDIT.

package secret

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldUpdatedAt, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldTeamID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldDescription, v))
}

// Allowlist applies equality check predicate on the "allowlist" field. It's identical to AllowlistEQ.
func Allowlist(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldAllowlist, v))
}

// CreatedByUser applies equality check predicate on the "created_by_user" field. It's identical to CreatedByUserEQ.
func CreatedByUser(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedByUser, v))
}

// CreatedByAPIKey applies equality check predicate on the "created_by_api_key" field. It's identical to CreatedByAPIKeyEQ.
func CreatedByAPIKey(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedByAPIKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Secret {
	return predicate.Secret(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Secret {
	return predicate.Secret(sql.FieldNotNull(FieldUpdatedAt))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldTeamID, vs...))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldLabel, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Secret {
	return predicate.Secret(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Secret {
	return predicate.Secret(sql.FieldContainsFold(FieldDescription, v))
}

// AllowlistEQ applies the EQ predicate on the "allowlist" field.
func AllowlistEQ(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldAllowlist, v))
}

// AllowlistNEQ applies the NEQ predicate on the "allowlist" field.
func AllowlistNEQ(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldAllowlist, v))
}

// AllowlistIn applies the In predicate on the "allowlist" field.
func AllowlistIn(vs ...pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldAllowlist, vs...))
}

// AllowlistNotIn applies the NotIn predicate on the "allowlist" field.
func AllowlistNotIn(vs ...pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldAllowlist, vs...))
}

// AllowlistGT applies the GT predicate on the "allowlist" field.
func AllowlistGT(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldGT(FieldAllowlist, v))
}

// AllowlistGTE applies the GTE predicate on the "allowlist" field.
func AllowlistGTE(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldGTE(FieldAllowlist, v))
}

// AllowlistLT applies the LT predicate on the "allowlist" field.
func AllowlistLT(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldLT(FieldAllowlist, v))
}

// AllowlistLTE applies the LTE predicate on the "allowlist" field.
func AllowlistLTE(v pq.StringArray) predicate.Secret {
	return predicate.Secret(sql.FieldLTE(FieldAllowlist, v))
}

// CreatedByUserEQ applies the EQ predicate on the "created_by_user" field.
func CreatedByUserEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedByUser, v))
}

// CreatedByUserNEQ applies the NEQ predicate on the "created_by_user" field.
func CreatedByUserNEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldCreatedByUser, v))
}

// CreatedByUserIn applies the In predicate on the "created_by_user" field.
func CreatedByUserIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldCreatedByUser, vs...))
}

// CreatedByUserNotIn applies the NotIn predicate on the "created_by_user" field.
func CreatedByUserNotIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldCreatedByUser, vs...))
}

// CreatedByUserIsNil applies the IsNil predicate on the "created_by_user" field.
func CreatedByUserIsNil() predicate.Secret {
	return predicate.Secret(sql.FieldIsNull(FieldCreatedByUser))
}

// CreatedByUserNotNil applies the NotNil predicate on the "created_by_user" field.
func CreatedByUserNotNil() predicate.Secret {
	return predicate.Secret(sql.FieldNotNull(FieldCreatedByUser))
}

// CreatedByAPIKeyEQ applies the EQ predicate on the "created_by_api_key" field.
func CreatedByAPIKeyEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldEQ(FieldCreatedByAPIKey, v))
}

// CreatedByAPIKeyNEQ applies the NEQ predicate on the "created_by_api_key" field.
func CreatedByAPIKeyNEQ(v uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNEQ(FieldCreatedByAPIKey, v))
}

// CreatedByAPIKeyIn applies the In predicate on the "created_by_api_key" field.
func CreatedByAPIKeyIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldIn(FieldCreatedByAPIKey, vs...))
}

// CreatedByAPIKeyNotIn applies the NotIn predicate on the "created_by_api_key" field.
func CreatedByAPIKeyNotIn(vs ...uuid.UUID) predicate.Secret {
	return predicate.Secret(sql.FieldNotIn(FieldCreatedByAPIKey, vs...))
}

// CreatedByAPIKeyIsNil applies the IsNil predicate on the "created_by_api_key" field.
func CreatedByAPIKeyIsNil() predicate.Secret {
	return predicate.Secret(sql.FieldIsNull(FieldCreatedByAPIKey))
}

// CreatedByAPIKeyNotNil applies the NotNil predicate on the "created_by_api_key" field.
func CreatedByAPIKeyNotNil() predicate.Secret {
	return predicate.Secret(sql.FieldNotNull(FieldCreatedByAPIKey))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := newTeamStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatorUser applies the HasEdge predicate on the "creator_user" edge.
func HasCreatorUser() predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorUserTable, CreatorUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorUserWith applies the HasEdge predicate on the "creator_user" edge with a given conditions (other predicates).
func HasCreatorUserWith(preds ...predicate.User) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := newCreatorUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatorAPIKey applies the HasEdge predicate on the "creator_api_key" edge.
func HasCreatorAPIKey() predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorAPIKeyTable, CreatorAPIKeyColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TeamAPIKey
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorAPIKeyWith applies the HasEdge predicate on the "creator_api_key" edge with a given conditions (other predicates).
func HasCreatorAPIKeyWith(preds ...predicate.TeamAPIKey) predicate.Secret {
	return predicate.Secret(func(s *sql.Selector) {
		step := newCreatorAPIKeyStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TeamAPIKey
		step.Edge.Schema = schemaConfig.Secret
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Secret) predicate.Secret {
	return predicate.Secret(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Secret) predicate.Secret {
	return predicate.Secret(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Secret) predicate.Secret {
	return predicate.Secret(sql.NotPredicates(p))
}
