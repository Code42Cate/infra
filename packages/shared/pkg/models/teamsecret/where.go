// Code generated by ent, DO NOT EDIT.

package teamsecret

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldID, id))
}

// SecretPrefix applies equality check predicate on the "secret_prefix" field. It's identical to SecretPrefixEQ.
func SecretPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretPrefix, v))
}

// SecretLength applies equality check predicate on the "secret_length" field. It's identical to SecretLengthEQ.
func SecretLength(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretLength, v))
}

// SecretMaskPrefix applies equality check predicate on the "secret_mask_prefix" field. It's identical to SecretMaskPrefixEQ.
func SecretMaskPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretMaskPrefix, v))
}

// SecretMaskSuffix applies equality check predicate on the "secret_mask_suffix" field. It's identical to SecretMaskSuffixEQ.
func SecretMaskSuffix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretMaskSuffix, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldUpdatedAt, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldTeamID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldName, v))
}

// Hosts applies equality check predicate on the "hosts" field. It's identical to HostsEQ.
func Hosts(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldHosts, v))
}

// SecretPrefixEQ applies the EQ predicate on the "secret_prefix" field.
func SecretPrefixEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretPrefix, v))
}

// SecretPrefixNEQ applies the NEQ predicate on the "secret_prefix" field.
func SecretPrefixNEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldSecretPrefix, v))
}

// SecretPrefixIn applies the In predicate on the "secret_prefix" field.
func SecretPrefixIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldSecretPrefix, vs...))
}

// SecretPrefixNotIn applies the NotIn predicate on the "secret_prefix" field.
func SecretPrefixNotIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldSecretPrefix, vs...))
}

// SecretPrefixGT applies the GT predicate on the "secret_prefix" field.
func SecretPrefixGT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldSecretPrefix, v))
}

// SecretPrefixGTE applies the GTE predicate on the "secret_prefix" field.
func SecretPrefixGTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldSecretPrefix, v))
}

// SecretPrefixLT applies the LT predicate on the "secret_prefix" field.
func SecretPrefixLT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldSecretPrefix, v))
}

// SecretPrefixLTE applies the LTE predicate on the "secret_prefix" field.
func SecretPrefixLTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldSecretPrefix, v))
}

// SecretPrefixContains applies the Contains predicate on the "secret_prefix" field.
func SecretPrefixContains(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContains(FieldSecretPrefix, v))
}

// SecretPrefixHasPrefix applies the HasPrefix predicate on the "secret_prefix" field.
func SecretPrefixHasPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasPrefix(FieldSecretPrefix, v))
}

// SecretPrefixHasSuffix applies the HasSuffix predicate on the "secret_prefix" field.
func SecretPrefixHasSuffix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasSuffix(FieldSecretPrefix, v))
}

// SecretPrefixEqualFold applies the EqualFold predicate on the "secret_prefix" field.
func SecretPrefixEqualFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEqualFold(FieldSecretPrefix, v))
}

// SecretPrefixContainsFold applies the ContainsFold predicate on the "secret_prefix" field.
func SecretPrefixContainsFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContainsFold(FieldSecretPrefix, v))
}

// SecretLengthEQ applies the EQ predicate on the "secret_length" field.
func SecretLengthEQ(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretLength, v))
}

// SecretLengthNEQ applies the NEQ predicate on the "secret_length" field.
func SecretLengthNEQ(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldSecretLength, v))
}

// SecretLengthIn applies the In predicate on the "secret_length" field.
func SecretLengthIn(vs ...int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldSecretLength, vs...))
}

// SecretLengthNotIn applies the NotIn predicate on the "secret_length" field.
func SecretLengthNotIn(vs ...int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldSecretLength, vs...))
}

// SecretLengthGT applies the GT predicate on the "secret_length" field.
func SecretLengthGT(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldSecretLength, v))
}

// SecretLengthGTE applies the GTE predicate on the "secret_length" field.
func SecretLengthGTE(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldSecretLength, v))
}

// SecretLengthLT applies the LT predicate on the "secret_length" field.
func SecretLengthLT(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldSecretLength, v))
}

// SecretLengthLTE applies the LTE predicate on the "secret_length" field.
func SecretLengthLTE(v int) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldSecretLength, v))
}

// SecretMaskPrefixEQ applies the EQ predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixNEQ applies the NEQ predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixNEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixIn applies the In predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldSecretMaskPrefix, vs...))
}

// SecretMaskPrefixNotIn applies the NotIn predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixNotIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldSecretMaskPrefix, vs...))
}

// SecretMaskPrefixGT applies the GT predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixGT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixGTE applies the GTE predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixGTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixLT applies the LT predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixLT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixLTE applies the LTE predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixLTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixContains applies the Contains predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixContains(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContains(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixHasPrefix applies the HasPrefix predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixHasPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasPrefix(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixHasSuffix applies the HasSuffix predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixHasSuffix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasSuffix(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixEqualFold applies the EqualFold predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixEqualFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEqualFold(FieldSecretMaskPrefix, v))
}

// SecretMaskPrefixContainsFold applies the ContainsFold predicate on the "secret_mask_prefix" field.
func SecretMaskPrefixContainsFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContainsFold(FieldSecretMaskPrefix, v))
}

// SecretMaskSuffixEQ applies the EQ predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixNEQ applies the NEQ predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixNEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixIn applies the In predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldSecretMaskSuffix, vs...))
}

// SecretMaskSuffixNotIn applies the NotIn predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixNotIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldSecretMaskSuffix, vs...))
}

// SecretMaskSuffixGT applies the GT predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixGT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixGTE applies the GTE predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixGTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixLT applies the LT predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixLT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixLTE applies the LTE predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixLTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixContains applies the Contains predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixContains(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContains(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixHasPrefix applies the HasPrefix predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixHasPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasPrefix(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixHasSuffix applies the HasSuffix predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixHasSuffix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasSuffix(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixEqualFold applies the EqualFold predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixEqualFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEqualFold(FieldSecretMaskSuffix, v))
}

// SecretMaskSuffixContainsFold applies the ContainsFold predicate on the "secret_mask_suffix" field.
func SecretMaskSuffixContainsFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContainsFold(FieldSecretMaskSuffix, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotNull(FieldUpdatedAt))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...uuid.UUID) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldTeamID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldContainsFold(FieldName, v))
}

// HostsEQ applies the EQ predicate on the "hosts" field.
func HostsEQ(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldEQ(FieldHosts, v))
}

// HostsNEQ applies the NEQ predicate on the "hosts" field.
func HostsNEQ(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNEQ(FieldHosts, v))
}

// HostsIn applies the In predicate on the "hosts" field.
func HostsIn(vs ...pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldIn(FieldHosts, vs...))
}

// HostsNotIn applies the NotIn predicate on the "hosts" field.
func HostsNotIn(vs ...pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldNotIn(FieldHosts, vs...))
}

// HostsGT applies the GT predicate on the "hosts" field.
func HostsGT(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGT(FieldHosts, v))
}

// HostsGTE applies the GTE predicate on the "hosts" field.
func HostsGTE(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldGTE(FieldHosts, v))
}

// HostsLT applies the LT predicate on the "hosts" field.
func HostsLT(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLT(FieldHosts, v))
}

// HostsLTE applies the LTE predicate on the "hosts" field.
func HostsLTE(v pq.StringArray) predicate.TeamSecret {
	return predicate.TeamSecret(sql.FieldLTE(FieldHosts, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.TeamSecret {
	return predicate.TeamSecret(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.TeamSecret
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.TeamSecret {
	return predicate.TeamSecret(func(s *sql.Selector) {
		step := newTeamStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.TeamSecret
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TeamSecret) predicate.TeamSecret {
	return predicate.TeamSecret(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TeamSecret) predicate.TeamSecret {
	return predicate.TeamSecret(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TeamSecret) predicate.TeamSecret {
	return predicate.TeamSecret(sql.NotPredicates(p))
}
