// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/secret"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/team"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// SecretUpdate is the builder for updating Secret entities.
type SecretUpdate struct {
	config
	hooks     []Hook
	mutation  *SecretMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SecretUpdate builder.
func (su *SecretUpdate) Where(ps ...predicate.Secret) *SecretUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SecretUpdate) SetUpdatedAt(t time.Time) *SecretUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SecretUpdate) SetNillableUpdatedAt(t *time.Time) *SecretUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SecretUpdate) ClearUpdatedAt() *SecretUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetTeamID sets the "team_id" field.
func (su *SecretUpdate) SetTeamID(u uuid.UUID) *SecretUpdate {
	su.mutation.SetTeamID(u)
	return su
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (su *SecretUpdate) SetNillableTeamID(u *uuid.UUID) *SecretUpdate {
	if u != nil {
		su.SetTeamID(*u)
	}
	return su
}

// SetName sets the "name" field.
func (su *SecretUpdate) SetName(s string) *SecretUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SecretUpdate) SetNillableName(s *string) *SecretUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetHosts sets the "hosts" field.
func (su *SecretUpdate) SetHosts(pa pq.StringArray) *SecretUpdate {
	su.mutation.SetHosts(pa)
	return su
}

// SetTeam sets the "team" edge to the Team entity.
func (su *SecretUpdate) SetTeam(t *Team) *SecretUpdate {
	return su.SetTeamID(t.ID)
}

// Mutation returns the SecretMutation object of the builder.
func (su *SecretUpdate) Mutation() *SecretMutation {
	return su.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (su *SecretUpdate) ClearTeam() *SecretUpdate {
	su.mutation.ClearTeam()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SecretUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SecretUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SecretUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SecretUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SecretUpdate) check() error {
	if _, ok := su.mutation.TeamID(); su.mutation.TeamCleared() && !ok {
		return errors.New(`models: clearing a required unique edge "Secret.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SecretUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SecretUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SecretUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(secret.Table, secret.Columns, sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(secret.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(secret.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(secret.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Hosts(); ok {
		_spec.SetField(secret.FieldHosts, field.TypeOther, value)
	}
	if su.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   secret.TeamTable,
			Columns: []string{secret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = su.schemaConfig.Secret
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   secret.TeamTable,
			Columns: []string{secret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = su.schemaConfig.Secret
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Secret
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{secret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SecretUpdateOne is the builder for updating a single Secret entity.
type SecretUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SecretMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SecretUpdateOne) SetUpdatedAt(t time.Time) *SecretUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SecretUpdateOne) SetNillableUpdatedAt(t *time.Time) *SecretUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SecretUpdateOne) ClearUpdatedAt() *SecretUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetTeamID sets the "team_id" field.
func (suo *SecretUpdateOne) SetTeamID(u uuid.UUID) *SecretUpdateOne {
	suo.mutation.SetTeamID(u)
	return suo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (suo *SecretUpdateOne) SetNillableTeamID(u *uuid.UUID) *SecretUpdateOne {
	if u != nil {
		suo.SetTeamID(*u)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SecretUpdateOne) SetName(s string) *SecretUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SecretUpdateOne) SetNillableName(s *string) *SecretUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetHosts sets the "hosts" field.
func (suo *SecretUpdateOne) SetHosts(pa pq.StringArray) *SecretUpdateOne {
	suo.mutation.SetHosts(pa)
	return suo
}

// SetTeam sets the "team" edge to the Team entity.
func (suo *SecretUpdateOne) SetTeam(t *Team) *SecretUpdateOne {
	return suo.SetTeamID(t.ID)
}

// Mutation returns the SecretMutation object of the builder.
func (suo *SecretUpdateOne) Mutation() *SecretMutation {
	return suo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (suo *SecretUpdateOne) ClearTeam() *SecretUpdateOne {
	suo.mutation.ClearTeam()
	return suo
}

// Where appends a list predicates to the SecretUpdate builder.
func (suo *SecretUpdateOne) Where(ps ...predicate.Secret) *SecretUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SecretUpdateOne) Select(field string, fields ...string) *SecretUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Secret entity.
func (suo *SecretUpdateOne) Save(ctx context.Context) (*Secret, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SecretUpdateOne) SaveX(ctx context.Context) *Secret {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SecretUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SecretUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SecretUpdateOne) check() error {
	if _, ok := suo.mutation.TeamID(); suo.mutation.TeamCleared() && !ok {
		return errors.New(`models: clearing a required unique edge "Secret.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SecretUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SecretUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SecretUpdateOne) sqlSave(ctx context.Context) (_node *Secret, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(secret.Table, secret.Columns, sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "Secret.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, secret.FieldID)
		for _, f := range fields {
			if !secret.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != secret.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(secret.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(secret.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(secret.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Hosts(); ok {
		_spec.SetField(secret.FieldHosts, field.TypeOther, value)
	}
	if suo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   secret.TeamTable,
			Columns: []string{secret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = suo.schemaConfig.Secret
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   secret.TeamTable,
			Columns: []string{secret.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = suo.schemaConfig.Secret
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Secret
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Secret{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{secret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
