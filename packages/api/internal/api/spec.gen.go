// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
