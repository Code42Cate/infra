// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
