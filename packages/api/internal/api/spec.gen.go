// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/7h0LWfWsAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
