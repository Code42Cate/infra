// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dRts4bfbs9v/CwAA//+8bFFaHbIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
