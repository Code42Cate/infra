// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//7oBCnm+sAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
