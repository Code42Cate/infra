// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u/O7/wsAAP//FHJcxx+6AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
