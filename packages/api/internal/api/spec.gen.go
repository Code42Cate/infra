// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//BBBFPTCwAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
