// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//ppp1gFbDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
