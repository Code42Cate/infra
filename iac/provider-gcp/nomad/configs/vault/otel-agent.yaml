receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: "vault"
          scrape_interval: 10s
          metrics_path: /v1/sys/metrics
          scheme: https
          tls_config:
            insecure_skip_verify: true
            server_name: vault.service.consul
          static_configs:
            - targets: ['vault-leader.service.consul:${vault_port}']
exporters:
  otlp:
    endpoint: http://localhost:${otel_collector_grpc_port}
    tls:
      insecure: true
  otlphttp/grafana_cloud:
    endpoint: "${grafana_otlp_url}/otlp"
    auth:
      authenticator: basicauth/grafana_cloud
processors:
  batch: {}

  resourcedetection:
    detectors: [gcp]
    override: true
    gcp:
      resource_attributes:
        cloud.provider:
          enabled: false
        cloud.platform:
          enabled: false
        cloud.account.id:
          enabled: false
        cloud.availability_zone:
          enabled: false
        cloud.region:
          enabled: false
        host.type:
          enabled: true
        host.id:
          enabled: true
        gcp.gce.instance.name:
          enabled: true
        host.name:
          enabled: true

  transform/set-name:
    metric_statements:
      - set(datapoint.attributes["service.instance.id"], resource.attributes["gcp.gce.instance.name"])

  # Filter to keep only relevant vault metrics
  filter:
    metrics:
      include:
        match_type: regexp
        metric_names:
          # Vault core metrics
          - vault_*

extensions:
  basicauth/grafana_cloud:
    client_auth:
      username: "${grafana_username}"
      password: "${grafana_otel_collector_token}"

service:
  telemetry:
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: '0.0.0.0'
                port: 9999
  extensions:
    - basicauth/grafana_cloud
  pipelines:
    metrics:
      receivers:  [prometheus]
      processors: [filter, resourcedetection, transform/set-name, batch]
      exporters:  [otlphttp/grafana_cloud]
